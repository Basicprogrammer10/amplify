50306817,0,int main() {},c,1653854221,50306817,0,2
50306817,0,"import sys

for i in sys.argv[1:]:
    print(eval(i))",python,1653852461,50306817,0,2
50306817,0,"fn main() {
    for i in std::env::args().skip(1) {
        let a = i[0..3].parse::<i32>().unwrap();
        let b = i[4..7].parse::<i32>().unwrap();
        
        match i.chars().collect::<Vec<_>>()[3] {
            '+' => println!(""{}"", a + b),
            '-' => println!(""{}"", a - b),
            '*' => println!(""{}"", a * b),
            _ => {}
        }
    }
}",rust,1653867009,50306817,0,2
50306817,1,"fn main() {
    for i in std::env::args().skip(1) {
        let mut inc = 0;
        let mut last = u32::MAX;
        
        for j in i.split("","").map(|x| x.parse::<u32>().unwrap()) {
            if j > last {
                inc += 1;
            }
            
            last = j;
        }
        
        println!(""{inc}"")
    }
}",rust,1653859078,50306817,1,2
50306817,2,"fn main() {
    for i in std::env::args().skip(1) {
        let mut poz = (0, 0);
        
        for j in i.split("","") {
            match j {
                ""up"" => poz.0 += 1,
                ""down"" => poz.0 -= 1,
                ""left"" => poz.1 -= 1,
                ""right"" => poz.1 += 1,
                _ => {}
            }
        }
        
        println!(""({},{})"", poz.0, poz.1)
    }
}",rust,1653859529,50306817,2,2
50306817,3,"fn main() {
    for i in std::env::args().skip(1) {
        let mut depth = 0;
        let mut max_depth = 0;
        
        for j in i.chars() {
            match j {
                '{' => depth += 1,
                '}' => depth -= 1,
                _ => {}
            }
            
            max_depth = max_depth.max(depth);
        }
        
        println!(""{max_depth}"")
    }
}",rust,1653864104,50306817,3,2
50306817,4,"fn main() {
    let mut triangle = vec![""â–²"".to_string()];
    for i in 0..std::env::args().nth(1).unwrap().parse::<usize>().unwrap() {
        let space = "" "".repeat(2_usize.pow(i as u32));
        let mut d = triangle.clone();

        d.iter_mut().for_each(|r| {
            let new_row = format!(""{}{}{}"", space, r, space);
            *r = new_row;
        });

        triangle.iter().for_each(|r| {
            let new_row = format!(""{}{}{}"", r, "" "", r);
            d.push(new_row);
        });

        triangle = d;
    }

    triangle.iter().for_each(|r| println!(""{}"", r.trim_end()));
}",rust,1653864436,50306817,4,2

#[derive(Debug, Copy, Clone, PartialEq, Eq)]
enum Token {
    Ex,
    Oh,
    None,
}

fn main() {
    let raw = std::env::args()
        .skip(1)
        .next()
        .unwrap();
    let seg = raw
        .split(",")
        .collect::<Vec<_>>();
    let mut lines = Vec::new();

    for i in seg {
        let chars = i.chars().collect::<Vec<_>>();
        let mut line = Vec::new();
        let mut i = 0;

        while i < chars.len() {
            match chars[i] {
                'X' => line.push(Token::Ex),
                'O' => line.push(Token::Oh),
                '_' => line.push(Token::None),
                _ => {}
            }

            i += 1;
        }

        lines.push(line);
    }

    // Score bords
    let bords = lines
        .chunks(3)
        .map(|x| {
            let mut v = Vec::new();
            v.extend(x.iter().map(|x| x.to_owned()));
            v
        })
        .collect::<Vec<_>>();

    let mut score = Vec::new();

    'b: for b in bords {
        // Check Hor
        for i in b.iter() {
            if i[0] == i[1] && i[1] == i[2] && i[2] != Token::None {
                score.push("H");
                continue 'b;
            }
        }

        // Check Ver
        for i in 0..3 {
            if b[0][i] == b[1][i] && b[1][i] == b[2][i] && b[2][i] != Token::None {
                score.push("V");
                continue 'b;
            }
        }

        // Check Diag
        if b[1][1] != Token::None && (b[0][0] == b[1][1] && b[1][1] == b[2][2])
            || (b[0][2] == b[1][1] && b[1][1] == b[2][0])
        {
            score.push("D");
            continue 'b;
        }

        score.push("_");
    }

    println!("{}", format!("[{}]", score.join(",")));
}
