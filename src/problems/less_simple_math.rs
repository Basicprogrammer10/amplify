use rand::prelude::*;
use rand_chacha::ChaCha8Rng;

use super::Problem;

const PROBLEMS: &[&str
const SOLUTIONS: &[&str] = &["-11363","7443112","12433","-2096","-350891438","364508","2155","2335214","-7806","1419","13925","2030195","-10704","-370","161889","2989","-609","-1751","1175","-1199642","-293","6168","328872","-187799","-1279","-13249","-5594353","119009","-28244","-7936","189588","2466789","168256","97871","-61238389","-29606090","2135","-2406245","12990","7792","-3841","-46952","-101105","161558","20376323","9488530","60","-8685","22899","41890","246768","63572609","58081","58524638","2610","4747","32437349","1529","478099","354","-339","-943163","2740","3801","253","-51279","-2758857803","-17078039","460211","-2240","-7743","-335721","-9107","6512200","-8338","-2598","-5021","23969088","1072288","10157329","-3332246","60000489","-27136","-36905","27505753","-15895","1377144","-793760","6193","17","210123","-237800","6736","188860","-93143","7013","1792","-3147","167101","499"];

pub struct LessSimpleMath;

impl Problem for LessSimpleMath {
    fn id(&self) -> u64 {
        15
    }

    fn time(&self) -> u64 {
        1655352000
    }

    fn name(&self) -> &'static str {
        "Less Simple Math"
    }

    fn text(&self) -> &'static str {
        include_str!("./text/build/less_simple_math")
    }

    fn gen(&self, seed: u64) -> String {
        let mut rng = ChaCha8Rng::seed_from_u64(seed);
        let mut out = Vec::new();

        for _ in 0..10 {
            // let mut seg = vec![rng.gen_range(1..100).to_string()];
            // for _ in 0..rng.gen_range(3..10) {
            //     match rng.gen_range(0..4) {
            //         0 => seg.push(format!("+{}", rng.gen_range(1..100))),
            //         1 => seg.push(format!("-{}", rng.gen_range(1..100))),
            //         2 => seg.push(format!("*{}", rng.gen_range(1..100))),
            //         3 => seg.push(gen_par_seg(&mut rng)),
            //         _ => unreachable!(),
            //     }
            // }

            // out.push(seg.join(""));
            out.push(PROBLEMS[rng.gen_range(0..PROBLEMS.len())]);
        }

        out.join(" ")
    }

    fn check(&self, seed: u64) -> String {
        let mut rng = ChaCha8Rng::seed_from_u64(seed);
        let mut out = Vec::new();

        for _ in 0..10 {
            out.push(SOLUTIONS[rng.gen_range(0..SOLUTIONS.len())]);
        }

        out.join("\n")
    }
}

// TODO: this,,, maybe
// fn gen_par_seg(rng: &mut ChaCha8Rng) -> String {
//     let mut out = rng.gen_range(1..100).to_string();

//     for _ in 0..rng.gen_range(2..6) {
//         match rng.gen_range(0..3) {
//             0 => out.push_str(&format!("+{}", rng.gen_range(1..100))),
//             1 => out.push_str(&format!("-{}", rng.gen_range(1..100))),
//             2 => out.push_str(&format!("*{}", rng.gen_range(1..100))),
//             _ => unreachable!(),
//         }
//     }

//     format!("{}({out})", ["+", "-"][rng.gen_range(0..2) as usize])
// }

// #[cfg(test)]
// mod test {
//     use super::{LessSimpleMath, Problem};
//     use rand::RngCore;

//     const DIGIT: [char; 10] = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];

//     #[derive(Debug)]
//     enum Token {
//         Group(Vec<Token>),
//         Num(i32),
//         Add,
//         Sub,
//         Mul,
//     }

//     fn push_token(tokens: &mut Vec<Token>, group: &mut Option<Vec<Token>>, token: Token) {
//         if let Some(i) = group {
//             return i.push(token);
//         }
//         tokens.push(token);
//     }

//     #[test]
//     fn less_simple_math() {
//         for exp in math.split(" ").take(1) {
//             println!("{}", exp);
//             // Tokenize
//             let mut tokens = Vec::new();
//             let chars = exp.chars().collect::<Vec<_>>();
//             let mut i = 0;

//             let mut parse_num = false;
//             let mut num_build = String::new();
//             let mut group = None;

//             while i < chars.len() {
//                 let on_digit = DIGIT.contains(&chars[i]);
//                 if on_digit {
//                     parse_num = true;
//                     num_build.push(chars[i]);
//                 }
//                 if !on_digit && parse_num {
//                     parse_num = false;
//                     push_token(
//                         &mut tokens,
//                         &mut group,
//                         Token::Num(num_build.parse::<i32>().unwrap()),
//                     );
//                     num_build.clear();
//                 }

//                 match chars[i] {
//                     '+' => push_token(&mut tokens, &mut group, Token::Add),
//                     '-' => push_token(&mut tokens, &mut group, Token::Sub),
//                     '*' => push_token(&mut tokens, &mut group, Token::Mul),
//                     '(' => group = Some(Vec::new()),
//                     ')' => {
//                         tokens.push(Token::Group(group.unwrap()));
//                         group = None;
//                     }

//                     _ => {}
//                 }

//                 i += 1;
//             }

//             // Execute parentasies
//             // *ALL OF THE BODGES*

//             // for i in &mut tokens {
//             //     if let Token::Group(t) = i {}
//             // }

//             println!("{}", exp);
//             dbg!(tokens);
//         }
//     }
// }
